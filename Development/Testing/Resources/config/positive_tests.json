{
    "test_block_valid_put": {
        "title": "------------------[Block Placement Test 1: Valid-Sized File]------------------",
        "description": "This test validates that a tapestry.Block object will accept a put() request for a file that is actually of a size which would fit in the remaining size of the block.",
        "pass message": "[PASS] The Block object indicated it accepted the file.",
        "fail message": "[FAIL] See Error:"
    },
    "test_block_yield_full": {
        "title": "------------------[Block Placement Test 2: Check Full Flag]-------------------",
        "description": "This test validates that a tapestry.Block object will correctly set itself to full when none of the files in the ops list are small enough to fit in the remaining space.",
        "pass message": "[PASS] block.full returned True as expected.",
        "fail message": ""
    },
    "test_block_meta": {
        "title": "------------------------[Block 'Meta' Method Test]----------------------------",
        "description": "A simplistic test of the block.meta() method, using known arguments on a syntehtic block object to generate a RIFF file. Only validates that a RIFF was created and placed - format validation is its own test.",
        "pass message": "[PASS] The output file appeared in the expected location.",
        "fail message": "[FAIL] Something went wrong:"
    },
    "test_riff_find": {
        "title": "----------------------------[Riff 'FIND' Test]--------------------------------",
        "description": "Loads a known-good sample RIFF into a RecoveryIndex object and then attempts to use its find() method.",
        "pass message": "[PASS] The Find method returned the expected values based on the test RIFF",
        "fail message": "[FAIL] One or more errors were raised during this test:"
    },
    "test_riff_compliant": {
        "title": "-------------------------[Riff Compliance Testing]----------------------------",
        "description": "A large number of small tests are used to approximate full JSON validation for the RIFF file. This depends on the output from test_block_meta - if that test failed than this test will also fail by default.",
        "pass message": "[PASS] The RIFF file output in an earlier test is compliant in all ways with the RIFF Format Standard",
        "fail message": "[FAIL] The RIFF file was not output in an earlier test as expected, or is otherwise out of compliance. See specific errors below:"
    },
    "test_pkl_find": {
        "title": "----------------------------[PKL  'FIND' Test]--------------------------------",
        "description": "Generates a RecoveryIndex object using the older Pickle-based recovery format and uses it to attempt the find method.",
        "pass message": "[PASS] The RecoveryIndex object was generated succesffully and the returned values matched what was expected.",
        "fail message": "[FAIL] One or more issues occurred in the operation of the test, see below:"
    },
    "test_TaskCheckIntegrity_call": {
        "title": "-------------------------[Integrity Checker Test]-----------------------------",
        "description": "This test runs TaskCheckIntegrity for a known-good hash and ensures the logic of the test is sound",
        "pass message": "[PASS] The TaskCheckIntegrity call passed successfully.",
        "fail message": ""
    },
    "test_TaskCompress": {
        "title": "------------------------------[Compression Test]------------------------------",
        "description": "Very simplistically checks to make sure that the compression output file is written to the filesystem. Most functionality of the compression itself is from a standard library module, so no additional testing is necessary.",
        "pass message": "[PASS] The compressed tarball appeared where expected.",
        "fail message": ""
    },
    "test_TaskDecompress": {
        "title": "-----------------------------[Decompression Test]-----------------------------",
        "description": "Decompression verified both in terms of whether or not compression detection is working, and whether or not the tarfile was changed as a result.",
        "pass message": "[PASS] A decompressed file was generated successfully and preserved the original file's SHA256 Checksum",
        "fail message": ""
    },
    "test_TaskEncrypt": {
        "title": "-------------------------------[Encryption Test]------------------------------",
        "description": "Triggers an instance of TaskEncrypt, and determines if it successfully generates an output file. As the encrypted output would be different every attempt even with the same keys used, it is non-trivial to test that the encryption actually worked as designed. Reliance is instead placed on the upstream package python-gnupg's testing.",
        "pass message": "[PASS] An encrypted file was returned.",
        "fail message": "[FAIL] Something went wrong:"
    },
    "test_TaskDecrypt": {
        "title": "-------------------------------[Decryption Test]------------------------------",
        "description": "A more robust test to follow on from TaskEncrypt's test. This decrypts the file generated by TaskEncrypt, then verifies that it exists on the file system and has the same checksum as the original file which was first encrypted.",
        "pass message": "[PASS] A decrypted file was output in the expected location and had the same SHA256 checksum as the plaintext original.",
        "fail message": "[FAIL] One or more errors were raised during the test:"
    },
    "test_TaskSign": {
        "title": "--------------------------------[Signing Test]--------------------------------",
        "description": "Runs TaskSign against a test file and generates a signature. Simplistic test makes sure the file exists - the signature validation is part of an upstream component.",
        "pass message": "[PASS] The test generated a detatched signature file and placed it in the expected location.",
        "fail message": "[FAIL] One or more errors were raised during testing:"
    },
    "test_TaskTarBuild": {
        "title": "----------------------------[Unitary Tarring Test]----------------------------",
        "description": "Calls TaskTarBuild in order to add a single file to a single tarfile. Simply validates that the tarfile was then created; a qualitative test of whether or not the tarring was handled properly comes later.",
        "pass message": "[PASS] An output file was created in the expected location.",
        "fail message": "[FAIL] One or more issues were raised during the test:"
    },
    "test_TaskTarUnpack": {
        "title": "---------------------------[Unitary Untarring Test]---------------------------",
        "description": "Uses TaskTarUnpack against a file of known composition and uses checksums to determine if the file was unpacked without modifying the contents.",
        "pass message": "[PASS] All expected files were created and verified to be in the correct state using a SHA256 checksum.",
        "fail message": "[FAIL] One or more errors were raised in testing:"
    },
    "test_build_ops_list": {
        "title": "--------------------[Tests of the Build Ops List Function]--------------------",
        "description": "Tests Tapestry's Build Ops List function using a hardcoded namespace object and makes various comparisons in order to ensure that inclusive/default settings are respected and that all else is as expected. This is several tests bundled - the final lines of this test will be a message indicating either overall passage or overall failure of the test.",
        "pass message": "",
        "fail message": ""
    },
    "test_build_recovery_index": {
        "title": "-------------------[Tests of Build Recovery Index Function]-------------------",
        "description": "Calls the build_recovery_index using a source dictionary of known structure and values, then makes comparisons of the output in order to ensure that BRI is being faithful.",
        "pass message": "[PASS] The overall size of files in the index and estimation of which file is largest were both as expected.",
        "fail message": "[FAIL] One or more errors were raised in testing:"
    },
    "test_media_retrieve_files": {
        "title": "-------------------[Test the Media Retrieve Files Function]-------------------",
        "description": "This is a simple test that uses an expected pair of files to call the media_retrieve_files function from tapestry, then inspects the filesystem to see that those files were placed where expected. Finally, it examines the returned value (made_index) to make sure it is an instance of a RecoveryIndex object.",
        "pass message": "[PASS] MRF returned a valid Recovery Index and both the tapfile and corresponding signiature were placed as expected in the filesystem",
        "fail message": "[FAIL] One or more errors were raised in testing:"
    },
    "test_parse_config": {
        "title": "------------------------[Test the Configuration Parser]-----------------------",
        "description": "Generates a dummy namespace and populates it using parse_config and a control tapestry.cfg-type file. A dictionary of known values for the control is then compared against the namespace in order to validate that everything functioned as designed.",
        "pass message": "[PASS] All attributes of the namespace object were set by this function as expected.",
        "fail message": ""
    },
    "test_verify_blocks": {
        "title": "--------------------------[Block Verification Test]---------------------------",
        "description": "Calls the verify_blocks function against a known-good block (as used in the MRF test) in order to validate that both the expected types of data are returned and that validation functions as intended.",
        "pass message": "[PASS] verify_blocks appears to work as designed.",
        "fail message": "[FAIL] One or more errors were raised in testing:"
    }
}
